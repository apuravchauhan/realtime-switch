const pm2 = require('pm2');
const os = require('os');
const { SESClient, SendEmailCommand } = require('@aws-sdk/client-ses');
require('dotenv').config();

const ses = new SESClient({
  region: process.env.AWS_REGION || 'us-east-2',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
  }
});

async function collectMetrics() {
  return new Promise((resolve) => {
    pm2.list((err, processes) => {
      if (err) {
        console.error('PM2 connection error:', err);
        return resolve();
      }

      const proc = processes.find(p => p.name === 'rs-server');
      const metrics = {
        timestamp: new Date().toISOString(),
        status: proc?.pm2_env.status || 'stopped',
        restarts: proc?.pm2_env.restart_time || 0,
        cpu: proc?.monit.cpu || 0,
        memory: Math.round(proc?.monit.memory / 1024 / 1024) || 0, // MB
        systemCpu: os.loadavg()[0].toFixed(2),
        systemMemory: ((1 - os.freemem() / os.totalmem()) * 100).toFixed(1),
        uptime: proc ? Math.floor((Date.now() - proc.pm2_env.pm_uptime) / 1000) : 0 // seconds
      };

      console.log('📈 Collected metrics:', JSON.stringify(metrics, null, 2));
      sendEmail(metrics).then(() => {
        resolve();
      }).catch((err) => {
        console.error('Email error:', err);
        resolve();
      });
    });
  });
}

async function sendEmail(metrics) {
  const subject = `PM2 Monitor: ${metrics.status} | Restarts: ${metrics.restarts}`;

  const emailBody = `
PM2 Monitoring Report
=====================

Timestamp: ${metrics.timestamp}
Server: ${os.hostname()}

Process Status
--------------
Name: rs-server
Status: ${metrics.status}
Restarts: ${metrics.restarts}
Uptime: ${metrics.uptime}s
CPU Usage: ${metrics.cpu}%
Memory Usage: ${metrics.memory}MB

System Status
-------------
System CPU Load: ${metrics.systemCpu}
System Memory: ${metrics.systemMemory}%
System Uptime: ${Math.floor(os.uptime() / 3600)}h

---
Generated by @realtime-switch/observability
  `;

  const command = new SendEmailCommand({
    Source: process.env.FROM_EMAIL,
    Destination: { ToAddresses: [process.env.TO_EMAIL] },
    Message: {
      Subject: { Data: subject },
      Body: { Text: { Data: emailBody } }
    }
  });

  try {
    await ses.send(command);
    console.log(`✅ Monitoring email sent - Status: ${metrics.status}, Restarts: ${metrics.restarts}`);
  } catch (error) {
    console.error('❌ Email sending failed:', error.message);
  }
}

// Main execution
console.log('🔍 Starting PM2 monitoring...');
pm2.connect((err) => {
  if (err) {
    console.error('❌ Failed to connect to PM2:', err);
    process.exit(1);
  }

  console.log('✅ Connected to PM2');
  collectMetrics().then(() => {
    console.log('📊 Metrics collection completed');
    pm2.disconnect();
    process.exit(0);
  });
});